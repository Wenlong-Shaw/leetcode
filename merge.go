package leetcode

/*
* 10.01. 合并排序的数组
* 给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。
* 初始化 A 和 B 的元素数量分别为 m 和 n。

! 示例:
* 输入:
* A = [1,2,3,0,0,0], m = 3
* B = [2,5,6],       n = 3
* 输出: [1,2,2,3,5,6]

! 说明:
* A.length == n + m
*/

/*
* 逆向双指针法。
* m，n分别是A,B顺序数组的长度，可以作为尾部指针。
*
 */
func mergeArr(A []int, m int, B []int, n int) {
	for i := n + m - 1; i >= 0; i-- {
		//* 当B的元素都插入了A, 则退出合并
		if n-1 < 0 {
			return
		}
		//* 当A的元素都插入了A的正确位置，则将剩下的B的元素插完。
		if m-1 < 0 {
			n--
			A[i] = B[n]
			continue
		}
		//* 插入逻辑：哪边的末尾大，就插在A的尾部。插入后，尾部指针前进1.
		if A[m-1] < B[n-1] {
			n--
			A[i] = B[n]
		} else {
			m--
			A[i] = A[m]
		}
	}
}
